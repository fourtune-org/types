export type FourtuneProjectSourceFile = {
	type: string
	parents: string[]
	name: string
	path: string
	relative_path: string
	absolute_path: string
}

export type FourtuneHookFunction = (
	hook : FourtuneHook,
	fourtune_session : FourtuneSession,
	...args: any[]
) => Promise<void>

type FourtuneGeneratorFunction = (fourtune_session : FourtuneSession) => Promise<void>

//
// hooks are defined here in the order they are executed
//
export enum FourtuneHook {
	preprocess_pre           = "preprocess.pre",
	preprocess_post          = "preprocess.post",

	ephemerals_pre           = "ephemerals.pre",
	ephemerals_post          = "ephemerals.post",

	objects_pre              = "objects.pre",
	objects_post             = "objects.post",

	distributables_pre       = "distributables.pre",
	distributables_post      = "distributables.post"
}

type Items = {

}

export type GeneratorArgs = [
	string, (fourtune_session : FourtuneSession) => Promise<string>, ...any[]
]

export type FourtuneSession = {
	getProjectRoot() : string

	getProjectSourceFiles() : FourtuneProjectSourceFile[]

	addWarning(id : string, message : string) : void
	emitError(id : string, message : string) : void

	autogenerate: {
		warningComment() : string

		generateFromTemplate(
			source_path : string,
			items : Items
		) : FourtuneGeneratorFunction,

		generateSyncAsyncVariant(

		) : FourtuneGeneratorFunction,

		generateSyncAsyncVariantFromString(

		) : FourtuneGeneratorFunction
	}

	hooks: {
		register(
			hook : FourtuneHook,
			fn : FourtuneHookFunction
		) : void
	},

	objects: {
		addFile(...args: GeneratorArgs) : void
	},

	distributables: {
		addFile(...args: GeneratorArgs) : void
	}
}


/*
  user_data: {},
  getProjectRoot: [Function: getProjectRoot],
  getProjectConfig: [Function: getProjectConfig],
  getProjectSourceFiles: [Function: getProjectSourceFiles],
  addWarning: [Function: addWarning],
  emitError: [Function: emitError],
  autogenerate: {
    warningComment: [Function: warningComment],
    generateFromTemplate: [Function: default],
    generateSyncAsyncVariant: [Function: default],
    generateSyncAsyncVariantFromString: [Function: default],
    addFile: [Function: addAutogeneratedFile]
  },
  objects: { add: [Function: addObject] },
  distributables: { addFile: [Function: addDistributionFile] },
  hooks: { register: [Function: register] },
  target: { data: {} }
*/
